{"ast":null,"code":"// File: src/utils/Calculations.js\n// Future Value (FV) function\nconst FV=function(rate,nper,pmt,pv){let type=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;const pow=Math.pow(1+rate,nper);return-(pv*pow+pmt*((1+rate*type)*(pow-1)/rate));};// Payment (PMT) function\nconst PMT=function(rate,nper,pv){let fv=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let type=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;if(rate===0)return-(pv+fv)/nper;const pvif=Math.pow(1+rate,nper);return rate*(pv*pvif+fv)/((pvif-1)*(1+rate*type));};export const calculateResults=values=>{const{initialInvestment,prr,wr,nyr,eytl,federalTaxRate,stateTaxRate,rir,mwa,amp// Include AMP in calculation\n}=values;// Convert percentage inputs to decimals\nconst PRR=parseFloat(prr)/100;const WR=parseFloat(wr)/100;const FTR=parseFloat(federalTaxRate)/100;const STR=parseFloat(stateTaxRate)/100;const RIR=parseFloat(rir)/100;const II=parseFloat(initialInvestment);const MWA=parseFloat(mwa);const AMP=parseFloat(amp);// Calculate Amount at Retirement (AAR) using AMP\nconst AAR=FV(PRR,nyr,-12*AMP,-II,1);// Calculate Monthly Retirement Income (MRI)\nconst MRI=PMT(WR/12,eytl*12,-II,0,1);let results=[];let beginningBalance=AAR;let yearsToRetireComfortably=0;for(let year=1;year<=eytl;year++){const annualGrowth=FV(RIR,1,0,-beginningBalance)-beginningBalance;const taxes=(FTR+STR)*annualGrowth;const annualWithdrawal=MWA*12;const endingBalance=beginningBalance+annualGrowth-taxes-annualWithdrawal;const incomeInHand=annualWithdrawal-taxes;results.push({year,beginningBalance,annualGrowth,taxes,annualWithdrawal,endingBalance,incomeInHand});if(endingBalance>0){yearsToRetireComfortably=year;}else{break;}beginningBalance=endingBalance;}return{aar:AAR,results,yearsToRetireComfortably};};export const calculateChartData=(initialInvestment,prr,wr,nyr,eytl,federalTaxRate,stateTaxRate,rir,mwa)=>{const data=[];const maxAMP=5000;// Define a maximum AMP value for chart purposes\nconst increment=500;// Increment AMP by $500 for each data point\nfor(let amp=0;amp<=maxAMP;amp+=increment){let remainingFunds=initialInvestment;let totalNeeded=0;let year=0;let canRetire=true;while(year<eytl&&canRetire){const annualGrowth=FV(rir/100,1,0,-remainingFunds)-remainingFunds;const taxes=(federalTaxRate/100+stateTaxRate/100)*annualGrowth;const annualWithdrawal=mwa*12;const endingBalance=remainingFunds+annualGrowth-taxes-annualWithdrawal-amp*12;// Check if calculations result in negative or NaN values\nif(isNaN(annualGrowth)||isNaN(taxes)||isNaN(annualWithdrawal)||isNaN(endingBalance)){canRetire=false;break;}// Update funds and check if they are exhausted\nif(endingBalance<=0){canRetire=false;break;}remainingFunds=endingBalance;// Update remaining funds for next iteration\ntotalNeeded+=annualWithdrawal+taxes;// Accumulate total needed per year\nyear++;}data.push({amp,// Additional monthly payment\nyearsOfRetirement:year,// Years the funds will last\ntotalNeeded:year>0?totalNeeded:0// Total amount needed to last the lifetime\n});}return data;};","map":{"version":3,"names":["FV","rate","nper","pmt","pv","type","arguments","length","undefined","pow","Math","PMT","fv","pvif","calculateResults","values","initialInvestment","prr","wr","nyr","eytl","federalTaxRate","stateTaxRate","rir","mwa","amp","PRR","parseFloat","WR","FTR","STR","RIR","II","MWA","AMP","AAR","MRI","results","beginningBalance","yearsToRetireComfortably","year","annualGrowth","taxes","annualWithdrawal","endingBalance","incomeInHand","push","aar","calculateChartData","data","maxAMP","increment","remainingFunds","totalNeeded","canRetire","isNaN","yearsOfRetirement"],"sources":["/Users/skarlekar/Documents/GitHub/retirement-calculator/src/utils/Calculations.js"],"sourcesContent":["// File: src/utils/Calculations.js\n\n// Future Value (FV) function\nconst FV = (rate, nper, pmt, pv, type = 0) => {\n  const pow = Math.pow(1 + rate, nper);\n  return -((pv * pow) + (pmt * ((1 + rate * type) * (pow - 1) / rate)));\n};\n\n// Payment (PMT) function\nconst PMT = (rate, nper, pv, fv = 0, type = 0) => {\n  if (rate === 0) return -(pv + fv) / nper;\n  const pvif = Math.pow(1 + rate, nper);\n  return (rate * (pv * pvif + fv)) / ((pvif - 1) * (1 + rate * type));\n};\n\n\n\nexport const calculateResults = (values) => {\n  const {\n    initialInvestment,\n    prr,\n    wr,\n    nyr,\n    eytl,\n    federalTaxRate,\n    stateTaxRate,\n    rir,\n    mwa,\n    amp  // Include AMP in calculation\n  } = values;\n\n  // Convert percentage inputs to decimals\n  const PRR = parseFloat(prr) / 100;\n  const WR = parseFloat(wr) / 100;\n  const FTR = parseFloat(federalTaxRate) / 100;\n  const STR = parseFloat(stateTaxRate) / 100;\n  const RIR = parseFloat(rir) / 100;\n  const II = parseFloat(initialInvestment);\n  const MWA = parseFloat(mwa);\n  const AMP = parseFloat(amp);\n\n  // Calculate Amount at Retirement (AAR) using AMP\n  const AAR = FV(PRR, nyr, -12 * AMP, -II, 1);\n\n  // Calculate Monthly Retirement Income (MRI)\n  const MRI = PMT(WR / 12, eytl * 12, -II, 0, 1);\n\n  let results = [];\n  let beginningBalance = AAR;\n  let yearsToRetireComfortably = 0;\n\n  for (let year = 1; year <= eytl; year++) {\n    const annualGrowth = FV(RIR, 1, 0, -beginningBalance) - beginningBalance;\n    const taxes = (FTR + STR) * annualGrowth;\n    const annualWithdrawal = MWA * 12;\n    const endingBalance = beginningBalance + annualGrowth - taxes - annualWithdrawal;\n    const incomeInHand = annualWithdrawal - taxes;\n\n    results.push({\n      year,\n      beginningBalance,\n      annualGrowth,\n      taxes,\n      annualWithdrawal,\n      endingBalance,\n      incomeInHand\n    });\n\n    if (endingBalance > 0) {\n      yearsToRetireComfortably = year;\n    } else {\n      break;\n    }\n\n    beginningBalance = endingBalance;\n  }\n\n  return {\n    aar: AAR,\n    results,\n    yearsToRetireComfortably\n  };\n};\n\n\nexport const calculateChartData = (initialInvestment, prr, wr, nyr, eytl, federalTaxRate, stateTaxRate, rir, mwa) => {\n  const data = [];\n  const maxAMP = 5000; // Define a maximum AMP value for chart purposes\n  const increment = 500; // Increment AMP by $500 for each data point\n\n  for (let amp = 0; amp <= maxAMP; amp += increment) {\n    let remainingFunds = initialInvestment;\n    let totalNeeded = 0;\n    let year = 0;\n    let canRetire = true;\n\n    while (year < eytl && canRetire) {\n      const annualGrowth = FV(rir / 100, 1, 0, -remainingFunds) - remainingFunds;\n      const taxes = (federalTaxRate / 100 + stateTaxRate / 100) * annualGrowth;\n      const annualWithdrawal = mwa * 12;\n      const endingBalance = remainingFunds + annualGrowth - taxes - annualWithdrawal - (amp * 12);\n\n      // Check if calculations result in negative or NaN values\n      if (isNaN(annualGrowth) || isNaN(taxes) || isNaN(annualWithdrawal) || isNaN(endingBalance)) {\n        canRetire = false;\n        break;\n      }\n\n      // Update funds and check if they are exhausted\n      if (endingBalance <= 0) {\n        canRetire = false;\n        break;\n      }\n\n      remainingFunds = endingBalance; // Update remaining funds for next iteration\n      totalNeeded += annualWithdrawal + taxes; // Accumulate total needed per year\n      year++;\n    }\n\n    data.push({\n      amp, // Additional monthly payment\n      yearsOfRetirement: year, // Years the funds will last\n      totalNeeded: year > 0 ? totalNeeded : 0 // Total amount needed to last the lifetime\n    });\n  }\n\n  return data;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}